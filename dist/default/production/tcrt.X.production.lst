

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 26 16:58:46 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.44
    33                           ; Generated 14/09/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F45K22 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	smallconst
    68  000600                     __psmallconst:
    69                           	opt stack 0
    70  000600  00                 	db	0
    71  000601                     _AN_CHANNEL:
    72                           	opt stack 0
    73  000601  0012               	dw	18
    74  000603  001B               	dw	27
    75  000605  0009               	dw	9
    76  000607  000D               	dw	13
    77  000609  0001               	dw	1
    78  00060B  0004               	dw	4
    79  00060D  0007               	dw	7
    80  00060F  000F               	dw	15
    81  000611                     __end_of_AN_CHANNEL:
    82                           	opt stack 0
    83  000611                     _TRESHOLD:
    84                           	opt stack 0
    85  000611  8000               	dw	32768
    86  000613                     __end_of_TRESHOLD:
    87                           	opt stack 0
    88  000613  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           	psect	nvCOMRAM
    91  000030                     __pnvCOMRAM:
    92                           	opt stack 0
    93  000030                     _INT0_InterruptHandler:
    94                           	opt stack 0
    95  000030                     	ds	2
    96  0000                     _ANSELA	set	3896
    97  0000                     _ANSELE	set	3900
    98  0000                     _ANSELD	set	3899
    99  0000                     _ANSELB	set	3897
   100  0000                     _ANSELC	set	3898
   101  0000                     _LATEbits	set	3981
   102  0000                     _LATAbits	set	3977
   103  0000                     _LATBbits	set	3978
   104  0000                     _LATDbits	set	3980
   105  0000                     _LATCbits	set	3979
   106  0000                     _SSP2STATbits	set	3949
   107  0000                     _SSP2CON1bits	set	3948
   108  0000                     _SSP2BUF	set	3951
   109  0000                     _SSP2CON3	set	3945
   110  0000                     _SSP2CON1	set	3948
   111  0000                     _SSP2STAT	set	3949
   112  0000                     _OSCTUNE	set	3995
   113  0000                     _OSCCON2	set	4050
   114  0000                     _OSCCON	set	4051
   115  0000                     _INTCONbits	set	4082
   116  0000                     _RCONbits	set	4048
   117  0000                     _INTCON2bits	set	4081
   118  0000                     _WPUB	set	3937
   119  0000                     _TRISD	set	3989
   120  0000                     _TRISC	set	3988
   121  0000                     _TRISB	set	3987
   122  0000                     _TRISA	set	3986
   123  0000                     _TRISE	set	3990
   124  0000                     _LATC	set	3979
   125  0000                     _LATB	set	3978
   126  0000                     _LATA	set	3977
   127  0000                     _LATD	set	3980
   128  0000                     _LATE	set	3981
   129  0000                     _ADCON0bits	set	4034
   130  0000                     _ADRESH	set	4036
   131  0000                     _ADRESL	set	4035
   132  0000                     _ADCON2	set	4032
   133  0000                     _ADCON1	set	4033
   134  0000                     _ADCON0	set	4034
   135                           
   136                           ; #config settings
   137  0000                     
   138                           	psect	cinit
   139  0008F0                     __pcinit:
   140                           	opt stack 0
   141  0008F0                     start_initialization:
   142                           	opt stack 0
   143  0008F0                     __initialization:
   144                           	opt stack 0
   145                           
   146                           ; Clear objects allocated to COMRAM (16 bytes)
   147  0008F0  EE00  F020         	lfsr	0,__pbssCOMRAM
   148  0008F4  0E10               	movlw	16
   149  0008F6                     clear_0:
   150  0008F6  6AEE               	clrf	postinc0,c
   151  0008F8  06E8               	decf	wreg,f,c
   152  0008FA  E1FD               	bnz	clear_0
   153  0008FC                     end_of_initialization:
   154                           	opt stack 0
   155  0008FC                     __end_of__initialization:
   156                           	opt stack 0
   157  0008FC  9032               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   158  0008FE  9232               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   159  000900  0E00               	movlw	low (__Lmediumconst shr (0+16))
   160  000902  6EF8               	movwf	tblptru,c
   161  000904  0100               	movlb	0
   162  000906  EFB0  F003         	goto	_main	;jump to C main() function
   163                           tblptru	equ	0xFF8
   164                           postinc0	equ	0xFEE
   165                           wreg	equ	0xFE8
   166                           
   167                           	psect	bssCOMRAM
   168  000020                     __pbssCOMRAM:
   169                           	opt stack 0
   170  000020                     _tcrt:
   171                           	opt stack 0
   172  000020                     	ds	16
   173                           tblptru	equ	0xFF8
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	opt stack 0
   180  000001                     ??_INTERRUPT_InterruptManager:
   181  000001                     
   182                           ; 1 bytes @ 0x0
   183  000001                     	ds	18
   184  000013                     ?_ADC_GetConversion:
   185                           	opt stack 0
   186  000013                     INT0_SetInterruptHandler@InterruptHandler:
   187                           	opt stack 0
   188  000013                     setTCRT@pos:
   189                           	opt stack 0
   190  000013                     setLed@pos:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x12
   194  000013                     	ds	2
   195  000015                     ??_ADC_GetConversion:
   196  000015                     setTCRT@value:
   197                           	opt stack 0
   198  000015                     setLed@value:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x14
   202  000015                     	ds	2
   203  000017                     ??_setTCRT:
   204  000017                     ??_setLed:
   205  000017                     ADC_GetConversion@channel:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x16
   209  000017                     	ds	2
   210  000019                     
   211                           ; 1 bytes @ 0x18
   212  000019                     	ds	2
   213  00001B                     drawToLeds@i:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x1A
   217  00001B                     	ds	2
   218  00001D                     ??_main:
   219                           
   220                           ; 1 bytes @ 0x1C
   221  00001D                     	ds	1
   222  00001E                     main@i:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x1D
   226  00001E                     	ds	2
   227                           tblptru	equ	0xFF8
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 142 in file "main.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;  i               2   29[COMRAM] int 
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      void 
   243 ;; Registers used:
   244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   250 ;;      Params:         0       0       0       0       0       0       0
   251 ;;      Locals:         2       0       0       0       0       0       0
   252 ;;      Temps:          1       0       0       0       0       0       0
   253 ;;      Totals:         3       0       0       0       0       0       0
   254 ;;Total ram usage:        3 bytes
   255 ;; Hardware stack levels required when called:    7
   256 ;; This function calls:
   257 ;;		_ADC_GetConversion
   258 ;;		_ADC_Initialize
   259 ;;		_PIN_MANAGER_Initialize
   260 ;;		_SYSTEM_Initialize
   261 ;;		_drawToLeds
   262 ;;		_setTCRT
   263 ;; This function is called by:
   264 ;;		Startup code after reset
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text0
   269  000760                     __ptext0:
   270                           	opt stack 0
   271  000760                     _main:
   272                           	opt stack 24
   273                           
   274                           ;main.c: 145: SYSTEM_Initialize();
   275                           
   276                           ;incstack = 0
   277  000760  EC85  F004         	call	_SYSTEM_Initialize	;wreg free
   278                           
   279                           ;main.c: 175: PIN_MANAGER_Initialize();
   280  000764  EC2E  F004         	call	_PIN_MANAGER_Initialize	;wreg free
   281                           
   282                           ;main.c: 176: ADC_Initialize();
   283  000768  EC92  F004         	call	_ADC_Initialize	;wreg free
   284  00076C                     
   285                           ;main.c: 179: {
   286                           ;main.c: 182: for(int i = 0; i < 8; i++)
   287  00076C  0E00               	movlw	0
   288  00076E  6E1F               	movwf	main@i+1,c
   289  000770  0E00               	movlw	0
   290  000772  6E1E               	movwf	main@i,c
   291  000774                     l1186:
   292  000774  BE1F               	btfsc	main@i+1,7,c
   293  000776  D006               	goto	l258
   294  000778  501F               	movf	main@i+1,w,c
   295  00077A  E13D               	bnz	l1202
   296  00077C  0E08               	movlw	8
   297  00077E  5C1E               	subwf	main@i,w,c
   298  000780  B0D8               	btfsc	status,0,c
   299  000782  D039               	goto	u590
   300  000784                     l258:
   301                           
   302                           ;main.c: 183: {
   303                           ;main.c: 184: setTCRT(i, 1);
   304  000784  C01E  F013         	movff	main@i,setTCRT@pos
   305  000788  C01F  F014         	movff	main@i+1,setTCRT@pos+1
   306  00078C  0E00               	movlw	0
   307  00078E  6E16               	movwf	setTCRT@value+1,c
   308  000790  0E01               	movlw	1
   309  000792  6E15               	movwf	setTCRT@value,c
   310  000794  EC0A  F003         	call	_setTCRT	;wreg free
   311                           
   312                           ;main.c: 185: _delay((unsigned long)((2)*(16000000/4000.0)));
   313  000798  0E0B               	movlw	11
   314  00079A  6E1D               	movwf	??_main& (0+255),c
   315  00079C  0E62               	movlw	98
   316  00079E                     u607:
   317  00079E  2EE8               	decfsz	wreg,f,c
   318  0007A0  D7FE               	bra	u607
   319  0007A2  2E1D               	decfsz	??_main& (0+255),f,c
   320  0007A4  D7FC               	bra	u607
   321  0007A6  D000               	nop2	
   322                           
   323                           ;main.c: 189: tcrt[i] = ADC_GetConversion(AN_CHANNEL[i]);
   324  0007A8  90D8               	bcf	status,0,c
   325  0007AA  341E               	rlcf	main@i,w,c
   326  0007AC  6EF6               	movwf	tblptrl,c
   327  0007AE  341F               	rlcf	main@i+1,w,c
   328  0007B0  6EF7               	movwf	tblptrh,c
   329  0007B2  0E01               	movlw	low _AN_CHANNEL
   330  0007B4  26F6               	addwf	tblptrl,f,c
   331  0007B6  0E06               	movlw	high _AN_CHANNEL
   332  0007B8  22F7               	addwfc	tblptrh,f,c
   333  0007BA                     	if	0	;There are less than 3 active tblptr bytes
   334  0007BA                     	endif
   335  0007BA  0008               	tblrd		*
   336  0007BC  50F5               	movf	tablat,w,c
   337  0007BE  EC50  F004         	call	_ADC_GetConversion
   338  0007C2  90D8               	bcf	status,0,c
   339  0007C4  341E               	rlcf	main@i,w,c
   340  0007C6  6ED9               	movwf	fsr2l,c
   341  0007C8  341F               	rlcf	main@i+1,w,c
   342  0007CA  6EDA               	movwf	fsr2h,c
   343  0007CC  0E20               	movlw	low _tcrt
   344  0007CE  26D9               	addwf	fsr2l,f,c
   345  0007D0  0E00               	movlw	high _tcrt
   346  0007D2  22DA               	addwfc	fsr2h,f,c
   347  0007D4  C013  FFDE         	movff	?_ADC_GetConversion,postinc2
   348  0007D8  C014  FFDD         	movff	?_ADC_GetConversion+1,postdec2
   349                           
   350                           ;main.c: 190: setTCRT(i, 0);
   351  0007DC  C01E  F013         	movff	main@i,setTCRT@pos
   352  0007E0  C01F  F014         	movff	main@i+1,setTCRT@pos+1
   353  0007E4  0E00               	movlw	0
   354  0007E6  6E16               	movwf	setTCRT@value+1,c
   355  0007E8  0E00               	movlw	0
   356  0007EA  6E15               	movwf	setTCRT@value,c
   357  0007EC  EC0A  F003         	call	_setTCRT	;wreg free
   358  0007F0  4A1E               	infsnz	main@i,f,c
   359  0007F2  2A1F               	incf	main@i+1,f,c
   360  0007F4  D7BF               	goto	l1186
   361  0007F6                     u590:
   362  0007F6                     l1202:
   363                           
   364                           ;main.c: 192: }
   365                           ;main.c: 193: drawToLeds();
   366  0007F6  ECFE  F003         	call	_drawToLeds	;wreg free
   367  0007FA  D7B8               	goto	l257
   368  0007FC                     __end_of_main:
   369                           	opt stack 0
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           postinc2	equ	0xFDE
   377                           postdec2	equ	0xFDD
   378                           fsr2h	equ	0xFDA
   379                           fsr2l	equ	0xFD9
   380                           status	equ	0xFD8
   381                           
   382 ;; *************** function _setTCRT *****************
   383 ;; Defined at:
   384 ;;		line 63 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  pos             2   18[COMRAM] int 
   387 ;;  value           2   20[COMRAM] int 
   388 ;; Auto vars:     Size  Location     Type
   389 ;;		None
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, status,2, status,0
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   399 ;;      Params:         4       0       0       0       0       0       0
   400 ;;      Locals:         0       0       0       0       0       0       0
   401 ;;      Temps:          2       0       0       0       0       0       0
   402 ;;      Totals:         6       0       0       0       0       0       0
   403 ;;Total ram usage:        6 bytes
   404 ;; Hardware stack levels used:    1
   405 ;; Hardware stack levels required when called:    4
   406 ;; This function calls:
   407 ;;		Nothing
   408 ;; This function is called by:
   409 ;;		_main
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text1
   414  000614                     __ptext1:
   415                           	opt stack 0
   416  000614                     _setTCRT:
   417                           	opt stack 26
   418                           
   419                           ;main.c: 65: switch(pos)
   420                           
   421                           ;incstack = 0
   422  000614  D030               	goto	l219
   423  000616                     l220:
   424                           
   425                           ;main.c: 68: LATCbits.LATC5 = value;
   426  000616  B015               	btfsc	setTCRT@value,0,c
   427  000618  D002               	bra	u465
   428  00061A  9A8B               	bcf	3979,5,c	;volatile
   429  00061C  D001               	bra	u466
   430  00061E                     u465:
   431  00061E  8A8B               	bsf	3979,5,c	;volatile
   432  000620                     u466:
   433                           
   434                           ;main.c: 69: break;
   435  000620  0012               	return	
   436  000622                     l222:
   437                           
   438                           ;main.c: 71: LATDbits.LATD6 = value;
   439  000622  B015               	btfsc	setTCRT@value,0,c
   440  000624  D002               	bra	u475
   441  000626  9C8C               	bcf	3980,6,c	;volatile
   442  000628  D001               	bra	u476
   443  00062A                     u475:
   444  00062A  8C8C               	bsf	3980,6,c	;volatile
   445  00062C                     u476:
   446                           
   447                           ;main.c: 72: break;
   448  00062C  0012               	return	
   449  00062E                     l223:
   450                           
   451                           ;main.c: 74: LATBbits.LATB2 = value;
   452  00062E  B015               	btfsc	setTCRT@value,0,c
   453  000630  D002               	bra	u485
   454  000632  948A               	bcf	3978,2,c	;volatile
   455  000634  D001               	bra	u486
   456  000636                     u485:
   457  000636  848A               	bsf	3978,2,c	;volatile
   458  000638                     u486:
   459                           
   460                           ;main.c: 75: break;
   461  000638  0012               	return	
   462  00063A                     l224:
   463                           
   464                           ;main.c: 77: LATBbits.LATB4 = value;
   465  00063A  B015               	btfsc	setTCRT@value,0,c
   466  00063C  D002               	bra	u495
   467  00063E  988A               	bcf	3978,4,c	;volatile
   468  000640  D001               	bra	u496
   469  000642                     u495:
   470  000642  888A               	bsf	3978,4,c	;volatile
   471  000644                     u496:
   472                           
   473                           ;main.c: 78: break;
   474  000644  0012               	return	
   475  000646                     l225:
   476                           
   477                           ;main.c: 80: LATAbits.LATA2 = value;
   478  000646  B015               	btfsc	setTCRT@value,0,c
   479  000648  D002               	bra	u505
   480  00064A  9489               	bcf	3977,2,c	;volatile
   481  00064C  D001               	bra	u506
   482  00064E                     u505:
   483  00064E  8489               	bsf	3977,2,c	;volatile
   484  000650                     u506:
   485                           
   486                           ;main.c: 81: break;
   487  000650  0012               	return	
   488  000652                     l226:
   489                           
   490                           ;main.c: 83: LATAbits.LATA4 = value;
   491  000652  B015               	btfsc	setTCRT@value,0,c
   492  000654  D002               	bra	u515
   493  000656  9889               	bcf	3977,4,c	;volatile
   494  000658  D001               	bra	u516
   495  00065A                     u515:
   496  00065A  8889               	bsf	3977,4,c	;volatile
   497  00065C                     u516:
   498                           
   499                           ;main.c: 84: break;
   500  00065C  0012               	return	
   501  00065E                     l227:
   502                           
   503                           ;main.c: 86: LATEbits.LATE1 = value;
   504  00065E  B015               	btfsc	setTCRT@value,0,c
   505  000660  D002               	bra	u525
   506  000662  928D               	bcf	3981,1,c	;volatile
   507  000664  D001               	bra	u526
   508  000666                     u525:
   509  000666  828D               	bsf	3981,1,c	;volatile
   510  000668                     u526:
   511                           
   512                           ;main.c: 87: break;
   513  000668  0012               	return	
   514  00066A                     l228:
   515                           
   516                           ;main.c: 89: LATCbits.LATC2 = value;
   517  00066A  B015               	btfsc	setTCRT@value,0,c
   518  00066C  D002               	bra	u535
   519  00066E  948B               	bcf	3979,2,c	;volatile
   520  000670  D001               	bra	u536
   521  000672                     u535:
   522  000672  848B               	bsf	3979,2,c	;volatile
   523  000674                     u536:
   524                           
   525                           ;main.c: 91: }
   526                           
   527                           ;main.c: 90: break;
   528  000674  0012               	return	
   529  000676                     l219:
   530  000676  C013  F017         	movff	setTCRT@pos,??_setTCRT
   531  00067A  C014  F018         	movff	setTCRT@pos+1,??_setTCRT+1
   532                           
   533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   534                           ; Switch size 1, requested type "space"
   535                           ; Number of cases is 1, Range of values is 0 to 0
   536                           ; switch strategies available:
   537                           ; Name         Instructions Cycles
   538                           ; simple_byte            4     3 (average)
   539                           ;	Chosen strategy is simple_byte
   540  00067E  5018               	movf	??_setTCRT+1,w,c
   541  000680  0A00               	xorlw	0	; case 0
   542  000682  A4D8               	btfss	status,2,c
   543  000684  0012               	return	
   544                           
   545                           ; Switch size 1, requested type "space"
   546                           ; Number of cases is 8, Range of values is 0 to 7
   547                           ; switch strategies available:
   548                           ; Name         Instructions Cycles
   549                           ; simple_byte           25    13 (average)
   550                           ;	Chosen strategy is simple_byte
   551  000686  5017               	movf	??_setTCRT,w,c
   552  000688  0A00               	xorlw	0	; case 0
   553  00068A  B4D8               	btfsc	status,2,c
   554  00068C  D7C4               	goto	l220
   555  00068E  0A01               	xorlw	1	; case 1
   556  000690  B4D8               	btfsc	status,2,c
   557  000692  D7C7               	goto	l222
   558  000694  0A03               	xorlw	3	; case 2
   559  000696  B4D8               	btfsc	status,2,c
   560  000698  D7CA               	goto	l223
   561  00069A  0A01               	xorlw	1	; case 3
   562  00069C  B4D8               	btfsc	status,2,c
   563  00069E  D7CD               	goto	l224
   564  0006A0  0A07               	xorlw	7	; case 4
   565  0006A2  B4D8               	btfsc	status,2,c
   566  0006A4  D7D0               	goto	l225
   567  0006A6  0A01               	xorlw	1	; case 5
   568  0006A8  B4D8               	btfsc	status,2,c
   569  0006AA  D7D3               	goto	l226
   570  0006AC  0A03               	xorlw	3	; case 6
   571  0006AE  B4D8               	btfsc	status,2,c
   572  0006B0  D7D6               	goto	l227
   573  0006B2  0A01               	xorlw	1	; case 7
   574  0006B4  A4D8               	btfss	status,2,c
   575  0006B6  0012               	return	
   576  0006B8  D7D8               	goto	l228
   577  0006BA                     __end_of_setTCRT:
   578                           	opt stack 0
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           postinc2	equ	0xFDE
   586                           postdec2	equ	0xFDD
   587                           fsr2h	equ	0xFDA
   588                           fsr2l	equ	0xFD9
   589                           status	equ	0xFD8
   590                           
   591 ;; *************** function _drawToLeds *****************
   592 ;; Defined at:
   593 ;;		line 125 in file "main.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;  i               2   26[COMRAM] int 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   607 ;;      Params:         0       0       0       0       0       0       0
   608 ;;      Locals:         2       0       0       0       0       0       0
   609 ;;      Temps:          2       0       0       0       0       0       0
   610 ;;      Totals:         4       0       0       0       0       0       0
   611 ;;Total ram usage:        4 bytes
   612 ;; Hardware stack levels used:    1
   613 ;; Hardware stack levels required when called:    5
   614 ;; This function calls:
   615 ;;		_setLed
   616 ;; This function is called by:
   617 ;;		_main
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           	psect	text2
   622  0007FC                     __ptext2:
   623                           	opt stack 0
   624  0007FC                     _drawToLeds:
   625                           	opt stack 25
   626                           
   627                           ;main.c: 127: for(int i = 0; i<8; i++)
   628                           
   629                           ;incstack = 0
   630  0007FC  0E00               	movlw	0
   631  0007FE  6E1C               	movwf	drawToLeds@i+1,c
   632  000800  0E00               	movlw	0
   633  000802  6E1B               	movwf	drawToLeds@i,c
   634  000804                     l1168:
   635  000804  BE1C               	btfsc	drawToLeds@i+1,7,c
   636  000806  D006               	goto	l245
   637  000808  501C               	movf	drawToLeds@i+1,w,c
   638  00080A  E127               	bnz	l247
   639  00080C  0E08               	movlw	8
   640  00080E  5C1B               	subwf	drawToLeds@i,w,c
   641  000810  B0D8               	btfsc	status,0,c
   642  000812  0012               	return	
   643  000814                     l245:
   644                           
   645                           ;main.c: 128: setLed(i, tcrt[i]<TRESHOLD);
   646  000814  C01B  F013         	movff	drawToLeds@i,setLed@pos
   647  000818  C01C  F014         	movff	drawToLeds@i+1,setLed@pos+1
   648  00081C  0E11               	movlw	low _TRESHOLD
   649  00081E  6EF6               	movwf	tblptrl,c
   650  000820                     	if	1	;There is more than 1 active tblptr byte
   651  000820  0E06               	movlw	high _TRESHOLD
   652  000822  6EF7               	movwf	tblptrh,c
   653  000824                     	endif
   654  000824                     	if	0	;There are less than 3 active tblptr bytes
   655  000824                     	endif
   656  000824  90D8               	bcf	status,0,c
   657  000826  341B               	rlcf	drawToLeds@i,w,c
   658  000828  6ED9               	movwf	fsr2l,c
   659  00082A  341C               	rlcf	drawToLeds@i+1,w,c
   660  00082C  6EDA               	movwf	fsr2h,c
   661  00082E  0E20               	movlw	low _tcrt
   662  000830  26D9               	addwf	fsr2l,f,c
   663  000832  0E00               	movlw	high _tcrt
   664  000834  22DA               	addwfc	fsr2h,f,c
   665  000836  0009               	tblrd		*+
   666  000838  50F5               	movf	tablat,w,c
   667  00083A  5CDE               	subwf	postinc2,w,c
   668  00083C  0009               	tblrd		*+
   669  00083E  50F5               	movf	tablat,w,c
   670  000840  58DE               	subwfb	postinc2,w,c
   671  000842  B0D8               	btfsc	status,0,c
   672  000844  D002               	goto	u550
   673  000846  0E01               	movlw	1
   674  000848  D001               	goto	u560
   675  00084A                     u550:
   676  00084A  0E00               	movlw	0
   677  00084C                     u560:
   678  00084C  6E15               	movwf	setLed@value,c
   679  00084E  6A16               	clrf	setLed@value+1,c
   680  000850  EC5D  F003         	call	_setLed	;wreg free
   681  000854  4A1B               	infsnz	drawToLeds@i,f,c
   682  000856  2A1C               	incf	drawToLeds@i+1,f,c
   683  000858  D7D5               	goto	l1168
   684  00085A                     l247:
   685  00085A  0012               	return		;funcret
   686  00085C                     __end_of_drawToLeds:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postinc2	equ	0xFDE
   695                           postdec2	equ	0xFDD
   696                           fsr2h	equ	0xFDA
   697                           fsr2l	equ	0xFD9
   698                           status	equ	0xFD8
   699                           
   700 ;; *************** function _setLed *****************
   701 ;; Defined at:
   702 ;;		line 94 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;  pos             2   18[COMRAM] int 
   705 ;;  value           2   20[COMRAM] int 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   717 ;;      Params:         4       0       0       0       0       0       0
   718 ;;      Locals:         0       0       0       0       0       0       0
   719 ;;      Temps:          2       0       0       0       0       0       0
   720 ;;      Totals:         6       0       0       0       0       0       0
   721 ;;Total ram usage:        6 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    4
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_drawToLeds
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text3
   732  0006BA                     __ptext3:
   733                           	opt stack 0
   734  0006BA                     _setLed:
   735                           	opt stack 25
   736                           
   737                           ;main.c: 96: switch(pos)
   738                           
   739                           ;incstack = 0
   740  0006BA  D030               	goto	l232
   741  0006BC                     l233:
   742                           
   743                           ;main.c: 99: LATCbits.LATC4 = value;
   744  0006BC  B015               	btfsc	setLed@value,0,c
   745  0006BE  D002               	bra	u375
   746  0006C0  988B               	bcf	3979,4,c	;volatile
   747  0006C2  D001               	bra	u376
   748  0006C4                     u375:
   749  0006C4  888B               	bsf	3979,4,c	;volatile
   750  0006C6                     u376:
   751                           
   752                           ;main.c: 100: break;
   753  0006C6  0012               	return	
   754  0006C8                     l235:
   755                           
   756                           ;main.c: 102: LATDbits.LATD5 = value;
   757  0006C8  B015               	btfsc	setLed@value,0,c
   758  0006CA  D002               	bra	u385
   759  0006CC  9A8C               	bcf	3980,5,c	;volatile
   760  0006CE  D001               	bra	u386
   761  0006D0                     u385:
   762  0006D0  8A8C               	bsf	3980,5,c	;volatile
   763  0006D2                     u386:
   764                           
   765                           ;main.c: 103: break;
   766  0006D2  0012               	return	
   767  0006D4                     l236:
   768                           
   769                           ;main.c: 105: LATBbits.LATB1 = value;
   770  0006D4  B015               	btfsc	setLed@value,0,c
   771  0006D6  D002               	bra	u395
   772  0006D8  928A               	bcf	3978,1,c	;volatile
   773  0006DA  D001               	bra	u396
   774  0006DC                     u395:
   775  0006DC  828A               	bsf	3978,1,c	;volatile
   776  0006DE                     u396:
   777                           
   778                           ;main.c: 106: break;
   779  0006DE  0012               	return	
   780  0006E0                     l237:
   781                           
   782                           ;main.c: 108: LATDbits.LATD2 = value;
   783  0006E0  B015               	btfsc	setLed@value,0,c
   784  0006E2  D002               	bra	u405
   785  0006E4  948C               	bcf	3980,2,c	;volatile
   786  0006E6  D001               	bra	u406
   787  0006E8                     u405:
   788  0006E8  848C               	bsf	3980,2,c	;volatile
   789  0006EA                     u406:
   790                           
   791                           ;main.c: 109: break;
   792  0006EA  0012               	return	
   793  0006EC                     l238:
   794                           
   795                           ;main.c: 111: LATAbits.LATA0 = value;
   796  0006EC  B015               	btfsc	setLed@value,0,c
   797  0006EE  D002               	bra	u415
   798  0006F0  9089               	bcf	3977,0,c	;volatile
   799  0006F2  D001               	bra	u416
   800  0006F4                     u415:
   801  0006F4  8089               	bsf	3977,0,c	;volatile
   802  0006F6                     u416:
   803                           
   804                           ;main.c: 112: break;
   805  0006F6  0012               	return	
   806  0006F8                     l239:
   807                           
   808                           ;main.c: 114: LATAbits.LATA3 = value;
   809  0006F8  B015               	btfsc	setLed@value,0,c
   810  0006FA  D002               	bra	u425
   811  0006FC  9689               	bcf	3977,3,c	;volatile
   812  0006FE  D001               	bra	u426
   813  000700                     u425:
   814  000700  8689               	bsf	3977,3,c	;volatile
   815  000702                     u426:
   816                           
   817                           ;main.c: 115: break;
   818  000702  0012               	return	
   819  000704                     l240:
   820                           
   821                           ;main.c: 117: LATEbits.LATE0 = value;
   822  000704  B015               	btfsc	setLed@value,0,c
   823  000706  D002               	bra	u435
   824  000708  908D               	bcf	3981,0,c	;volatile
   825  00070A  D001               	bra	u436
   826  00070C                     u435:
   827  00070C  808D               	bsf	3981,0,c	;volatile
   828  00070E                     u436:
   829                           
   830                           ;main.c: 118: break;
   831  00070E  0012               	return	
   832  000710                     l241:
   833                           
   834                           ;main.c: 120: LATCbits.LATC1 = value;
   835  000710  B015               	btfsc	setLed@value,0,c
   836  000712  D002               	bra	u445
   837  000714  928B               	bcf	3979,1,c	;volatile
   838  000716  D001               	bra	u446
   839  000718                     u445:
   840  000718  828B               	bsf	3979,1,c	;volatile
   841  00071A                     u446:
   842                           
   843                           ;main.c: 122: }
   844                           
   845                           ;main.c: 121: break;
   846  00071A  0012               	return	
   847  00071C                     l232:
   848  00071C  C013  F017         	movff	setLed@pos,??_setLed
   849  000720  C014  F018         	movff	setLed@pos+1,??_setLed+1
   850                           
   851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   852                           ; Switch size 1, requested type "space"
   853                           ; Number of cases is 1, Range of values is 0 to 0
   854                           ; switch strategies available:
   855                           ; Name         Instructions Cycles
   856                           ; simple_byte            4     3 (average)
   857                           ;	Chosen strategy is simple_byte
   858  000724  5018               	movf	??_setLed+1,w,c
   859  000726  0A00               	xorlw	0	; case 0
   860  000728  A4D8               	btfss	status,2,c
   861  00072A  0012               	return	
   862                           
   863                           ; Switch size 1, requested type "space"
   864                           ; Number of cases is 8, Range of values is 0 to 7
   865                           ; switch strategies available:
   866                           ; Name         Instructions Cycles
   867                           ; simple_byte           25    13 (average)
   868                           ;	Chosen strategy is simple_byte
   869  00072C  5017               	movf	??_setLed,w,c
   870  00072E  0A00               	xorlw	0	; case 0
   871  000730  B4D8               	btfsc	status,2,c
   872  000732  D7C4               	goto	l233
   873  000734  0A01               	xorlw	1	; case 1
   874  000736  B4D8               	btfsc	status,2,c
   875  000738  D7C7               	goto	l235
   876  00073A  0A03               	xorlw	3	; case 2
   877  00073C  B4D8               	btfsc	status,2,c
   878  00073E  D7CA               	goto	l236
   879  000740  0A01               	xorlw	1	; case 3
   880  000742  B4D8               	btfsc	status,2,c
   881  000744  D7CD               	goto	l237
   882  000746  0A07               	xorlw	7	; case 4
   883  000748  B4D8               	btfsc	status,2,c
   884  00074A  D7D0               	goto	l238
   885  00074C  0A01               	xorlw	1	; case 5
   886  00074E  B4D8               	btfsc	status,2,c
   887  000750  D7D3               	goto	l239
   888  000752  0A03               	xorlw	3	; case 6
   889  000754  B4D8               	btfsc	status,2,c
   890  000756  D7D6               	goto	l240
   891  000758  0A01               	xorlw	1	; case 7
   892  00075A  A4D8               	btfss	status,2,c
   893  00075C  0012               	return	
   894  00075E  D7D8               	goto	l241
   895  000760                     __end_of_setLed:
   896                           	opt stack 0
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           postinc2	equ	0xFDE
   904                           postdec2	equ	0xFDD
   905                           fsr2h	equ	0xFDA
   906                           fsr2l	equ	0xFD9
   907                           status	equ	0xFD8
   908                           
   909 ;; *************** function _SYSTEM_Initialize *****************
   910 ;; Defined at:
   911 ;;		line 111 in file "mcc_generated_files/mcc.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;		None
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg, status,2, status,0, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   925 ;;      Params:         0       0       0       0       0       0       0
   926 ;;      Locals:         0       0       0       0       0       0       0
   927 ;;      Temps:          0       0       0       0       0       0       0
   928 ;;      Totals:         0       0       0       0       0       0       0
   929 ;;Total ram usage:        0 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:    6
   932 ;; This function calls:
   933 ;;		_ADC_Initialize
   934 ;;		_EXT_INT_Initialize
   935 ;;		_INTERRUPT_Initialize
   936 ;;		_OSCILLATOR_Initialize
   937 ;;		_PIN_MANAGER_Initialize
   938 ;;		_SPI2_Initialize
   939 ;; This function is called by:
   940 ;;		_main
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           	psect	text4
   945  00090A                     __ptext4:
   946                           	opt stack 0
   947  00090A                     _SYSTEM_Initialize:
   948                           	opt stack 24
   949                           
   950                           ;mcc.c: 114: INTERRUPT_Initialize();
   951                           
   952                           ;incstack = 0
   953  00090A  ECBE  F004         	call	_INTERRUPT_Initialize	;wreg free
   954                           
   955                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   956  00090E  EC2E  F004         	call	_PIN_MANAGER_Initialize	;wreg free
   957                           
   958                           ;mcc.c: 116: OSCILLATOR_Initialize();
   959  000912  ECAE  F004         	call	_OSCILLATOR_Initialize	;wreg free
   960                           
   961                           ;mcc.c: 117: SPI2_Initialize();
   962  000916  ECA7  F004         	call	_SPI2_Initialize	;wreg free
   963                           
   964                           ;mcc.c: 118: EXT_INT_Initialize();
   965  00091A  EC9D  F004         	call	_EXT_INT_Initialize	;wreg free
   966                           
   967                           ;mcc.c: 119: ADC_Initialize();
   968  00091E  EC92  F004         	call	_ADC_Initialize	;wreg free
   969  000922  0012               	return		;funcret
   970  000924                     __end_of_SYSTEM_Initialize:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postinc2	equ	0xFDE
   979                           postdec2	equ	0xFDD
   980                           fsr2h	equ	0xFDA
   981                           fsr2l	equ	0xFD9
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _SPI2_Initialize *****************
   985 ;; Defined at:
   986 ;;		line 63 in file "mcc_generated_files/spi2.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		wreg, status,2
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1000 ;;      Params:         0       0       0       0       0       0       0
  1001 ;;      Locals:         0       0       0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0
  1003 ;;      Totals:         0       0       0       0       0       0       0
  1004 ;;Total ram usage:        0 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    4
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_SYSTEM_Initialize
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text5
  1015  00094E                     __ptext5:
  1016                           	opt stack 0
  1017  00094E                     _SPI2_Initialize:
  1018                           	opt stack 25
  1019                           
  1020                           ;spi2.c: 68: SSP2STAT = 0x00;
  1021                           
  1022                           ;incstack = 0
  1023  00094E  0E00               	movlw	0
  1024  000950  6E6D               	movwf	3949,c	;volatile
  1025                           
  1026                           ;spi2.c: 71: SSP2CON1 = 0x24;
  1027  000952  0E24               	movlw	36
  1028  000954  6E6C               	movwf	3948,c	;volatile
  1029                           
  1030                           ;spi2.c: 74: SSP2CON3 = 0x00;
  1031  000956  0E00               	movlw	0
  1032  000958  6E69               	movwf	3945,c	;volatile
  1033  00095A  0012               	return		;funcret
  1034  00095C                     __end_of_SPI2_Initialize:
  1035                           	opt stack 0
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postinc2	equ	0xFDE
  1043                           postdec2	equ	0xFDD
  1044                           fsr2h	equ	0xFDA
  1045                           fsr2l	equ	0xFD9
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function _PIN_MANAGER_Initialize *****************
  1049 ;; Defined at:
  1050 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1064 ;;      Params:         0       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0
  1067 ;;      Totals:         0       0       0       0       0       0       0
  1068 ;;Total ram usage:        0 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    4
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_SYSTEM_Initialize
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text6
  1080  00085C                     __ptext6:
  1081                           	opt stack 0
  1082  00085C                     _PIN_MANAGER_Initialize:
  1083                           	opt stack 25
  1084                           
  1085                           ;pin_manager.c: 57: LATE = 0x00;
  1086                           
  1087                           ;incstack = 0
  1088  00085C  0E00               	movlw	0
  1089  00085E  6E8D               	movwf	3981,c	;volatile
  1090                           
  1091                           ;pin_manager.c: 58: LATD = 0x00;
  1092  000860  0E00               	movlw	0
  1093  000862  6E8C               	movwf	3980,c	;volatile
  1094                           
  1095                           ;pin_manager.c: 59: LATA = 0x00;
  1096  000864  0E00               	movlw	0
  1097  000866  6E89               	movwf	3977,c	;volatile
  1098                           
  1099                           ;pin_manager.c: 60: LATB = 0x00;
  1100  000868  0E00               	movlw	0
  1101  00086A  6E8A               	movwf	3978,c	;volatile
  1102                           
  1103                           ;pin_manager.c: 61: LATC = 0x00;
  1104  00086C  0E00               	movlw	0
  1105  00086E  6E8B               	movwf	3979,c	;volatile
  1106                           
  1107                           ;pin_manager.c: 66: TRISE = 0x04;
  1108  000870  0E04               	movlw	4
  1109  000872  6E96               	movwf	3990,c	;volatile
  1110                           
  1111                           ;pin_manager.c: 67: TRISA = 0xE2;
  1112  000874  0EE2               	movlw	226
  1113  000876  6E92               	movwf	3986,c	;volatile
  1114                           
  1115                           ;pin_manager.c: 68: TRISB = 0xE9;
  1116  000878  0EE9               	movlw	233
  1117  00087A  6E93               	movwf	3987,c	;volatile
  1118                           
  1119                           ;pin_manager.c: 69: TRISC = 0xC9;
  1120  00087C  0EC9               	movlw	201
  1121  00087E  6E94               	movwf	3988,c	;volatile
  1122                           
  1123                           ;pin_manager.c: 70: TRISD = 0x8B;
  1124  000880  0E8B               	movlw	139
  1125  000882  6E95               	movwf	3989,c	;volatile
  1126                           
  1127                           ;pin_manager.c: 75: ANSELC = 0xFC;
  1128  000884  0EFC               	movlw	252
  1129  000886  010F               	movlb	15	; () banked
  1130  000888  6F3A               	movwf	58,b	;volatile
  1131                           
  1132                           ;pin_manager.c: 76: ANSELB = 0x3E;
  1133  00088A  0E3E               	movlw	62
  1134  00088C  6F39               	movwf	57,b	;volatile
  1135                           
  1136                           ;pin_manager.c: 77: ANSELD = 0xE4;
  1137  00088E  0EE4               	movlw	228
  1138  000890  6F3B               	movwf	59,b	;volatile
  1139                           
  1140                           ;pin_manager.c: 78: ANSELE = 0x07;
  1141  000892  0E07               	movlw	7
  1142  000894  6F3C               	movwf	60,b	;volatile
  1143                           
  1144                           ;pin_manager.c: 79: ANSELA = 0x2F;
  1145  000896  0E2F               	movlw	47
  1146  000898  6F38               	movwf	56,b	;volatile
  1147                           
  1148                           ; BSR set to: 15
  1149                           ;pin_manager.c: 84: WPUB = 0xFF;
  1150  00089A  6861               	setf	3937,c	;volatile
  1151                           
  1152                           ; BSR set to: 15
  1153                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  1154  00089C  9EF1               	bcf	intcon2,7,c	;volatile
  1155                           
  1156                           ; BSR set to: 15
  1157  00089E  0012               	return		;funcret
  1158  0008A0                     __end_of_PIN_MANAGER_Initialize:
  1159                           	opt stack 0
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           intcon2	equ	0xFF1
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postinc2	equ	0xFDE
  1168                           postdec2	equ	0xFDD
  1169                           fsr2h	equ	0xFDA
  1170                           fsr2l	equ	0xFD9
  1171                           status	equ	0xFD8
  1172                           
  1173 ;; *************** function _OSCILLATOR_Initialize *****************
  1174 ;; Defined at:
  1175 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;		None
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         0       0       0       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0       0       0
  1192 ;;      Totals:         0       0       0       0       0       0       0
  1193 ;;Total ram usage:        0 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    4
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_SYSTEM_Initialize
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text7
  1204  00095C                     __ptext7:
  1205                           	opt stack 0
  1206  00095C                     _OSCILLATOR_Initialize:
  1207                           	opt stack 25
  1208                           
  1209                           ;mcc.c: 125: OSCCON = 0x70;
  1210                           
  1211                           ; BSR set to: 15
  1212                           ;incstack = 0
  1213  00095C  0E70               	movlw	112
  1214  00095E  6ED3               	movwf	4051,c	;volatile
  1215                           
  1216                           ;mcc.c: 127: OSCCON2 = 0x04;
  1217  000960  0E04               	movlw	4
  1218  000962  6ED2               	movwf	4050,c	;volatile
  1219                           
  1220                           ;mcc.c: 129: OSCTUNE = 0x00;
  1221  000964  0E00               	movlw	0
  1222  000966  6E9B               	movwf	3995,c	;volatile
  1223  000968  0012               	return		;funcret
  1224  00096A                     __end_of_OSCILLATOR_Initialize:
  1225                           	opt stack 0
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           intcon2	equ	0xFF1
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postinc2	equ	0xFDE
  1234                           postdec2	equ	0xFDD
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _INTERRUPT_Initialize *****************
  1240 ;; Defined at:
  1241 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		None
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1255 ;;      Params:         0       0       0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0
  1258 ;;      Totals:         0       0       0       0       0       0       0
  1259 ;;Total ram usage:        0 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    4
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_SYSTEM_Initialize
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text8
  1270  00097C                     __ptext8:
  1271                           	opt stack 0
  1272  00097C                     _INTERRUPT_Initialize:
  1273                           	opt stack 25
  1274                           
  1275                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1276                           
  1277                           ;incstack = 0
  1278  00097C  9ED0               	bcf	4048,7,c	;volatile
  1279  00097E  0012               	return		;funcret
  1280  000980                     __end_of_INTERRUPT_Initialize:
  1281                           	opt stack 0
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           intcon2	equ	0xFF1
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postinc2	equ	0xFDE
  1290                           postdec2	equ	0xFDD
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _EXT_INT_Initialize *****************
  1296 ;; Defined at:
  1297 ;;		line 90 in file "mcc_generated_files/ext_int.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, cstack
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1311 ;;      Params:         0       0       0       0       0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0
  1314 ;;      Totals:         0       0       0       0       0       0       0
  1315 ;;Total ram usage:        0 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    5
  1318 ;; This function calls:
  1319 ;;		_INT0_SetInterruptHandler
  1320 ;; This function is called by:
  1321 ;;		_SYSTEM_Initialize
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text9
  1326  00093A                     __ptext9:
  1327                           	opt stack 0
  1328  00093A                     _EXT_INT_Initialize:
  1329                           	opt stack 24
  1330                           
  1331                           ;ext_int.c: 99: (INTCONbits.INT0IF = 0);
  1332                           
  1333                           ;incstack = 0
  1334  00093A  92F2               	bcf	intcon,1,c	;volatile
  1335                           
  1336                           ;ext_int.c: 100: (INTCON2bits.INTEDG0 = 1);
  1337  00093C  8CF1               	bsf	intcon2,6,c	;volatile
  1338                           
  1339                           ;ext_int.c: 102: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  1340  00093E  0E80               	movlw	low _INT0_DefaultInterruptHandler
  1341  000940  6E13               	movwf	INT0_SetInterruptHandler@InterruptHandler,c
  1342  000942  0E09               	movlw	high _INT0_DefaultInterruptHandler
  1343  000944  6E14               	movwf	INT0_SetInterruptHandler@InterruptHandler+1,c
  1344  000946  ECB5  F004         	call	_INT0_SetInterruptHandler	;wreg free
  1345                           
  1346                           ;ext_int.c: 103: (INTCONbits.INT0IE = 1);
  1347  00094A  88F2               	bsf	intcon,4,c	;volatile
  1348  00094C  0012               	return		;funcret
  1349  00094E                     __end_of_EXT_INT_Initialize:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           intcon	equ	0xFF2
  1356                           intcon2	equ	0xFF1
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postinc2	equ	0xFDE
  1360                           postdec2	equ	0xFDD
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _INT0_SetInterruptHandler *****************
  1366 ;; Defined at:
  1367 ;;		line 70 in file "mcc_generated_files/ext_int.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  InterruptHan    2   18[COMRAM] PTR FTN()void 
  1370 ;;		 -> INT0_DefaultInterruptHandler(1), 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1382 ;;      Params:         2       0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0
  1385 ;;      Totals:         2       0       0       0       0       0       0
  1386 ;;Total ram usage:        2 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    4
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_EXT_INT_Initialize
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text10
  1397  00096A                     __ptext10:
  1398                           	opt stack 0
  1399  00096A                     _INT0_SetInterruptHandler:
  1400                           	opt stack 24
  1401                           
  1402                           ;ext_int.c: 71: INT0_InterruptHandler = InterruptHandler;
  1403                           
  1404                           ;incstack = 0
  1405  00096A  C013  F030         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  1406  00096E  C014  F031         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  1407  000972  0012               	return		;funcret
  1408  000974                     __end_of_INT0_SetInterruptHandler:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           intcon	equ	0xFF2
  1415                           intcon2	equ	0xFF1
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postinc2	equ	0xFDE
  1419                           postdec2	equ	0xFDD
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _ADC_Initialize *****************
  1425 ;; Defined at:
  1426 ;;		line 58 in file "mcc_generated_files/adc.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1440 ;;      Params:         0       0       0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0
  1443 ;;      Totals:         0       0       0       0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    4
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_SYSTEM_Initialize
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text11
  1456  000924                     __ptext11:
  1457                           	opt stack 0
  1458  000924                     _ADC_Initialize:
  1459                           	opt stack 25
  1460                           
  1461                           ;adc.c: 63: ADCON0 = 0x01;
  1462                           
  1463                           ;incstack = 0
  1464  000924  0E01               	movlw	1
  1465  000926  6EC2               	movwf	4034,c	;volatile
  1466                           
  1467                           ;adc.c: 66: ADCON1 = 0x00;
  1468  000928  0E00               	movlw	0
  1469  00092A  6EC1               	movwf	4033,c	;volatile
  1470                           
  1471                           ;adc.c: 69: ADCON2 = 0x00;
  1472  00092C  0E00               	movlw	0
  1473  00092E  6EC0               	movwf	4032,c	;volatile
  1474                           
  1475                           ;adc.c: 72: ADRESL = 0x00;
  1476  000930  0E00               	movlw	0
  1477  000932  6EC3               	movwf	4035,c	;volatile
  1478                           
  1479                           ;adc.c: 75: ADRESH = 0x00;
  1480  000934  0E00               	movlw	0
  1481  000936  6EC4               	movwf	4036,c	;volatile
  1482  000938  0012               	return		;funcret
  1483  00093A                     __end_of_ADC_Initialize:
  1484                           	opt stack 0
  1485                           tblptru	equ	0xFF8
  1486                           tblptrh	equ	0xFF7
  1487                           tblptrl	equ	0xFF6
  1488                           tablat	equ	0xFF5
  1489                           intcon	equ	0xFF2
  1490                           intcon2	equ	0xFF1
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postinc2	equ	0xFDE
  1494                           postdec2	equ	0xFDD
  1495                           fsr2h	equ	0xFDA
  1496                           fsr2l	equ	0xFD9
  1497                           status	equ	0xFD8
  1498                           
  1499 ;; *************** function _ADC_GetConversion *****************
  1500 ;; Defined at:
  1501 ;;		line 106 in file "mcc_generated_files/adc.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  channel         1    wreg     enum E6975
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  channel         1   22[COMRAM] enum E6975
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  2   18[COMRAM] unsigned int 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2, status,0
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1515 ;;      Params:         2       0       0       0       0       0       0
  1516 ;;      Locals:         1       0       0       0       0       0       0
  1517 ;;      Temps:          2       0       0       0       0       0       0
  1518 ;;      Totals:         5       0       0       0       0       0       0
  1519 ;;Total ram usage:        5 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    4
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text12
  1530  0008A0                     __ptext12:
  1531                           	opt stack 0
  1532  0008A0                     _ADC_GetConversion:
  1533                           	opt stack 26
  1534                           
  1535                           ;incstack = 0
  1536                           ;ADC_GetConversion@channel stored from wreg
  1537  0008A0  6E17               	movwf	ADC_GetConversion@channel,c
  1538                           
  1539                           ;adc.c: 109: ADCON0bits.CHS = channel;
  1540  0008A2  C017  F015         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  1541  0008A6  4615               	rlncf	??_ADC_GetConversion,f,c
  1542  0008A8  4615               	rlncf	??_ADC_GetConversion,f,c
  1543  0008AA  50C2               	movf	4034,w,c	;volatile
  1544  0008AC  1815               	xorwf	??_ADC_GetConversion,w,c
  1545  0008AE  0B83               	andlw	-125
  1546  0008B0  1815               	xorwf	??_ADC_GetConversion,w,c
  1547  0008B2  6EC2               	movwf	4034,c	;volatile
  1548                           
  1549                           ;adc.c: 112: ADCON0bits.ADON = 1;
  1550  0008B4  80C2               	bsf	4034,0,c	;volatile
  1551                           
  1552                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  1553  0008B6  82C2               	bsf	4034,1,c	;volatile
  1554  0008B8                     
  1555                           ;adc.c: 119: {
  1556  0008B8  B2C2               	btfsc	4034,1,c	;volatile
  1557  0008BA  D7FE               	goto	l31
  1558                           
  1559                           ;adc.c: 120: }
  1560                           ;adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  1561  0008BC  50C4               	movf	4036,w,c	;volatile
  1562  0008BE  6E16               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  1563  0008C0  6A15               	clrf	??_ADC_GetConversion& (0+255),c
  1564  0008C2  50C3               	movf	4035,w,c	;volatile
  1565  0008C4  2415               	addwf	??_ADC_GetConversion,w,c
  1566  0008C6  6E13               	movwf	?_ADC_GetConversion,c
  1567  0008C8  0E00               	movlw	0
  1568  0008CA  2016               	addwfc	??_ADC_GetConversion+1,w,c
  1569  0008CC  6E14               	movwf	?_ADC_GetConversion+1,c
  1570  0008CE  0012               	return	
  1571  0008D0                     __end_of_ADC_GetConversion:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           intcon	equ	0xFF2
  1578                           intcon2	equ	0xFF1
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postinc2	equ	0xFDE
  1582                           postdec2	equ	0xFDD
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _INTERRUPT_InterruptManager *****************
  1588 ;; Defined at:
  1589 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1603 ;;      Params:         0       0       0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0
  1605 ;;      Temps:         18       0       0       0       0       0       0
  1606 ;;      Totals:        18       0       0       0       0       0       0
  1607 ;;Total ram usage:       18 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    3
  1610 ;; This function calls:
  1611 ;;		_INT0_ISR
  1612 ;; This function is called by:
  1613 ;;		Interrupt level 2
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	intcode
  1618  000008                     __pintcode:
  1619                           	opt stack 0
  1620  000008                     _INTERRUPT_InterruptManager:
  1621                           	opt stack 24
  1622                           
  1623                           ;incstack = 0
  1624  000008  8232               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1625  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  1626  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1627  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  1628  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  1629  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  1630  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  1631  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  1632  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  1633  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
  1634  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
  1635  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  1636  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  1637  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  1638  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
  1639  000042  C032  F00F         	movff	btemp,??_INTERRUPT_InterruptManager+14
  1640  000046  C033  F010         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  1641  00004A  C034  F011         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  1642  00004E  C035  F012         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  1643                           
  1644                           ;interrupt_manager.c: 60: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  1645  000052  B8F2               	btfsc	intcon,4,c	;volatile
  1646  000054  A2F2               	btfss	intcon,1,c	;volatile
  1647  000056  D002               	goto	i2l87
  1648                           
  1649                           ;interrupt_manager.c: 61: {
  1650                           ;interrupt_manager.c: 62: INT0_ISR();
  1651  000058  ECBA  F004         	call	_INT0_ISR	;wreg free
  1652  00005C                     i2l87:
  1653                           
  1654                           ;interrupt_manager.c: 64: else
  1655                           ;interrupt_manager.c: 65: {
  1656  00005C  C012  F035         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  1657  000060  C011  F034         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  1658  000064  C010  F033         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  1659  000068  C00F  F032         	movff	??_INTERRUPT_InterruptManager+14,btemp
  1660  00006C  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1661  000070  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1662  000074  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1663  000078  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1664  00007C  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1665  000080  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1666  000084  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1667  000088  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1668  00008C  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1669  000090  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1670  000094  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1671  000098  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1672  00009C  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1673  0000A0  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1674  0000A4  9232               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1675  0000A6  0011               	retfie		f
  1676  0000A8                     __end_of_INTERRUPT_InterruptManager:
  1677                           	opt stack 0
  1678                           pclatu	equ	0xFFB
  1679                           pclath	equ	0xFFA
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           prodh	equ	0xFF4
  1685                           prodl	equ	0xFF3
  1686                           intcon	equ	0xFF2
  1687                           intcon2	equ	0xFF1
  1688                           postinc0	equ	0xFEE
  1689                           fsr0h	equ	0xFEA
  1690                           fsr0l	equ	0xFE9
  1691                           wreg	equ	0xFE8
  1692                           fsr1h	equ	0xFE2
  1693                           fsr1l	equ	0xFE1
  1694                           postinc2	equ	0xFDE
  1695                           postdec2	equ	0xFDD
  1696                           fsr2h	equ	0xFDA
  1697                           fsr2l	equ	0xFD9
  1698                           status	equ	0xFD8
  1699                           
  1700 ;; *************** function _INT0_ISR *****************
  1701 ;; Defined at:
  1702 ;;		line 43 in file "mcc_generated_files/ext_int.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1716 ;;      Params:         0       0       0       0       0       0       0
  1717 ;;      Locals:         0       0       0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0
  1719 ;;      Totals:         0       0       0       0       0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    2
  1723 ;; This function calls:
  1724 ;;		_INT0_CallBack
  1725 ;; This function is called by:
  1726 ;;		_INTERRUPT_InterruptManager
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text14
  1731  000974                     __ptext14:
  1732                           	opt stack 0
  1733  000974                     _INT0_ISR:
  1734                           	opt stack 24
  1735                           
  1736                           ;ext_int.c: 49: (INTCONbits.INT0IF = 0);
  1737                           
  1738                           ;incstack = 0
  1739  000974  92F2               	bcf	intcon,1,c	;volatile
  1740                           
  1741                           ;ext_int.c: 52: INT0_CallBack();
  1742  000976  EC68  F004         	call	_INT0_CallBack	;wreg free
  1743  00097A  0012               	return		;funcret
  1744  00097C                     __end_of_INT0_ISR:
  1745                           	opt stack 0
  1746                           pclatu	equ	0xFFB
  1747                           pclath	equ	0xFFA
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           prodh	equ	0xFF4
  1753                           prodl	equ	0xFF3
  1754                           intcon	equ	0xFF2
  1755                           intcon2	equ	0xFF1
  1756                           postinc0	equ	0xFEE
  1757                           fsr0h	equ	0xFEA
  1758                           fsr0l	equ	0xFE9
  1759                           wreg	equ	0xFE8
  1760                           fsr1h	equ	0xFE2
  1761                           fsr1l	equ	0xFE1
  1762                           postinc2	equ	0xFDE
  1763                           postdec2	equ	0xFDD
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _INT0_CallBack *****************
  1769 ;; Defined at:
  1770 ;;		line 58 in file "mcc_generated_files/ext_int.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1784 ;;      Params:         0       0       0       0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0
  1787 ;;      Totals:         0       0       0       0       0       0       0
  1788 ;;Total ram usage:        0 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    1
  1791 ;; This function calls:
  1792 ;;		Absolute function
  1793 ;;		_INT0_DefaultInterruptHandler
  1794 ;; This function is called by:
  1795 ;;		_INT0_ISR
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text15
  1800  0008D0                     __ptext15:
  1801                           	opt stack 0
  1802  0008D0                     _INT0_CallBack:
  1803                           	opt stack 24
  1804                           
  1805                           ;ext_int.c: 61: if(INT0_InterruptHandler)
  1806                           
  1807                           ;incstack = 0
  1808  0008D0  5030               	movf	_INT0_InterruptHandler,w,c
  1809  0008D2  1031               	iorwf	_INT0_InterruptHandler+1,w,c
  1810  0008D4  B4D8               	btfsc	status,2,c
  1811  0008D6  0012               	return	
  1812                           
  1813                           ;ext_int.c: 62: {
  1814                           ;ext_int.c: 63: INT0_InterruptHandler();
  1815  0008D8  D801               	call	i2u2_48
  1816  0008DA  0012               	return	
  1817  0008DC                     i2u2_48:
  1818  0008DC  0005               	push	
  1819  0008DE  6EFA               	movwf	pclath,c
  1820  0008E0  5030               	movf	_INT0_InterruptHandler,w,c
  1821  0008E2  6EFD               	movwf	tosl,c
  1822  0008E4  5031               	movf	_INT0_InterruptHandler+1,w,c
  1823  0008E6  6EFE               	movwf	tosh,c
  1824  0008E8  50F8               	movf	tblptru,w,c
  1825  0008EA  6EFF               	movwf	tosu,c
  1826  0008EC  50FA               	movf	pclath,w,c
  1827  0008EE  0012               	return		;indir
  1828  0008F0                     __end_of_INT0_CallBack:
  1829                           	opt stack 0
  1830                           tosu	equ	0xFFF
  1831                           tosh	equ	0xFFE
  1832                           tosl	equ	0xFFD
  1833                           pclatu	equ	0xFFB
  1834                           pclath	equ	0xFFA
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           prodh	equ	0xFF4
  1840                           prodl	equ	0xFF3
  1841                           intcon	equ	0xFF2
  1842                           intcon2	equ	0xFF1
  1843                           postinc0	equ	0xFEE
  1844                           fsr0h	equ	0xFEA
  1845                           fsr0l	equ	0xFE9
  1846                           wreg	equ	0xFE8
  1847                           fsr1h	equ	0xFE2
  1848                           fsr1l	equ	0xFE1
  1849                           postinc2	equ	0xFDE
  1850                           postdec2	equ	0xFDD
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _INT0_DefaultInterruptHandler *****************
  1856 ;; Defined at:
  1857 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		None
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1871 ;;      Params:         0       0       0       0       0       0       0
  1872 ;;      Locals:         0       0       0       0       0       0       0
  1873 ;;      Temps:          0       0       0       0       0       0       0
  1874 ;;      Totals:         0       0       0       0       0       0       0
  1875 ;;Total ram usage:        0 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_EXT_INT_Initialize
  1881 ;;		_INT0_CallBack
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text16
  1886  000980                     __ptext16:
  1887                           	opt stack 0
  1888  000980                     _INT0_DefaultInterruptHandler:
  1889                           	opt stack 24
  1890                           
  1891                           ;incstack = 0
  1892  000980  0012               	return		;funcret
  1893  000982                     __end_of_INT0_DefaultInterruptHandler:
  1894                           	opt stack 0
  1895                           tosu	equ	0xFFF
  1896                           tosh	equ	0xFFE
  1897                           tosl	equ	0xFFD
  1898                           pclatu	equ	0xFFB
  1899                           pclath	equ	0xFFA
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           intcon	equ	0xFF2
  1907                           intcon2	equ	0xFF1
  1908                           postinc0	equ	0xFEE
  1909                           fsr0h	equ	0xFEA
  1910                           fsr0l	equ	0xFE9
  1911                           wreg	equ	0xFE8
  1912                           fsr1h	equ	0xFE2
  1913                           fsr1l	equ	0xFE1
  1914                           postinc2	equ	0xFDE
  1915                           postdec2	equ	0xFDD
  1916                           fsr2h	equ	0xFDA
  1917                           fsr2l	equ	0xFD9
  1918                           status	equ	0xFD8
  1919                           tosu	equ	0xFFF
  1920                           tosh	equ	0xFFE
  1921                           tosl	equ	0xFFD
  1922                           pclatu	equ	0xFFB
  1923                           pclath	equ	0xFFA
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           intcon	equ	0xFF2
  1931                           intcon2	equ	0xFF1
  1932                           postinc0	equ	0xFEE
  1933                           fsr0h	equ	0xFEA
  1934                           fsr0l	equ	0xFE9
  1935                           wreg	equ	0xFE8
  1936                           fsr1h	equ	0xFE2
  1937                           fsr1l	equ	0xFE1
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944                           	psect	text17
  1945  000000                     __ptext17:
  1946                           	opt stack 0
  1947                           tosu	equ	0xFFF
  1948                           tosh	equ	0xFFE
  1949                           tosl	equ	0xFFD
  1950                           pclatu	equ	0xFFB
  1951                           pclath	equ	0xFFA
  1952                           tblptru	equ	0xFF8
  1953                           tblptrh	equ	0xFF7
  1954                           tblptrl	equ	0xFF6
  1955                           tablat	equ	0xFF5
  1956                           prodh	equ	0xFF4
  1957                           prodl	equ	0xFF3
  1958                           intcon	equ	0xFF2
  1959                           intcon2	equ	0xFF1
  1960                           postinc0	equ	0xFEE
  1961                           fsr0h	equ	0xFEA
  1962                           fsr0l	equ	0xFE9
  1963                           wreg	equ	0xFE8
  1964                           fsr1h	equ	0xFE2
  1965                           fsr1l	equ	0xFE1
  1966                           postinc2	equ	0xFDE
  1967                           postdec2	equ	0xFDD
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972                           	psect	rparam
  1973  0000                     tosu	equ	0xFFF
  1974                           tosh	equ	0xFFE
  1975                           tosl	equ	0xFFD
  1976                           pclatu	equ	0xFFB
  1977                           pclath	equ	0xFFA
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           prodh	equ	0xFF4
  1983                           prodl	equ	0xFF3
  1984                           intcon	equ	0xFF2
  1985                           intcon2	equ	0xFF1
  1986                           postinc0	equ	0xFEE
  1987                           fsr0h	equ	0xFEA
  1988                           fsr0l	equ	0xFE9
  1989                           wreg	equ	0xFE8
  1990                           fsr1h	equ	0xFE2
  1991                           fsr1l	equ	0xFE1
  1992                           postinc2	equ	0xFDE
  1993                           postdec2	equ	0xFDD
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998                           	psect	temp
  1999  000032                     btemp:
  2000                           	opt stack 0
  2001  000032                     	ds	1
  2002  0000                     int$flags	set	btemp
  2003  0000                     wtemp6	set	btemp+1
  2004                           tosu	equ	0xFFF
  2005                           tosh	equ	0xFFE
  2006                           tosl	equ	0xFFD
  2007                           pclatu	equ	0xFFB
  2008                           pclath	equ	0xFFA
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           prodh	equ	0xFF4
  2014                           prodl	equ	0xFF3
  2015                           intcon	equ	0xFF2
  2016                           intcon2	equ	0xFF1
  2017                           postinc0	equ	0xFEE
  2018                           fsr0h	equ	0xFEA
  2019                           fsr0l	equ	0xFE9
  2020                           wreg	equ	0xFE8
  2021                           fsr1h	equ	0xFE2
  2022                           fsr1l	equ	0xFE1
  2023                           postinc2	equ	0xFDE
  2024                           postdec2	equ	0xFDD
  2025                           fsr2h	equ	0xFDA
  2026                           fsr2l	equ	0xFD9
  2027                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        0
    BSS         16
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      49
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    _main->_drawToLeds
    _drawToLeds->_setLed
    _EXT_INT_Initialize->_INT0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1196
                                             28 COMRAM     3     3      0
                  _ADC_GetConversion
                     _ADC_Initialize
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
                         _drawToLeds
                            _setTCRT
 ---------------------------------------------------------------------------------
 (1) _setTCRT                                              6     2      4     502
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _drawToLeds                                           4     4      0     440
                                             24 COMRAM     4     4      0
                             _setLed
 ---------------------------------------------------------------------------------
 (2) _setLed                                               6     2      4     350
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      98
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                           _INT0_ISR
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT0_CallBack                                        0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _ADC_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
   _drawToLeds
     _setLed
   _setTCRT

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      31       1       52.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       9        0.0%
DATA                 0      0      31      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 26 16:58:46 2017

                                      l31 08B8                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l220 0616                                       l222 0622  
                                     l223 062E                                       l232 071C  
                                     l240 0704                                       l224 063A  
                                     l241 0710                                       l233 06BC  
                                     l225 0646                                       l226 0652  
                                     l235 06C8                                       l219 0676  
                                     l227 065E                                       l236 06D4  
                                     l228 066A                                       l237 06E0  
                                     l245 0814                                       l238 06EC  
                                     l239 06F8                                       l247 085A  
                                     l257 076C                                       l258 0784  
                            __CFG_CPB$OFF 000000                                       u405 06E8  
                                     u406 06EA                                       u415 06F4  
                                     u416 06F6                                       u425 0700  
                                     u505 064E                                       u426 0702  
                                     u506 0650                              __CFG_CPD$OFF 000000  
                                     u435 070C                                       u515 065A  
                                     u436 070E                                       u516 065C  
                                     u445 0718                                       u525 0666  
                                     u446 071A                                       u550 084A  
                                     u526 0668                                       u375 06C4  
                                     u535 0672                                       u607 079E  
                                     u376 06C6                                       u560 084C  
                                     u536 0674                                       u385 06D0  
                                     u465 061E                                       u386 06D2  
                                     u466 0620                                       u395 06DC  
                                     u475 062A                                       u396 06DE  
                                     u476 062C                                       u485 0636  
                                     u486 0638                                       u590 07F6  
                                     u495 0642                                       u496 0644  
              ??_INT0_SetInterruptHandler 0015                               drawToLeds@i 001B  
                                     tosl 000FFD                                       wreg 000FE8  
                           _INT0_CallBack 08D0                                      l1202 07F6  
                                    l1168 0804                                      l1186 0774  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      i2l87 005C  
                                    _WPUB 000F61                                      _main 0760  
                                    _tcrt 0020                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0032  
                           __CFG_BORV$190 000000                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00A8  
                           __CFG_IESO$OFF 000000                              ___param_bank 000000  
                        __end_of_INT0_ISR 097C            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 096A                                     ?_main 0001  
                          __CFG_DEBUG$OFF 000000                                     _TRISA 000F92  
                                   _TRISB 000F93                            ?_INT0_CallBack 0001  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                        __end_of_TRESHOLD 0613                           __end_of_setTCRT 06BA  
                      __CFG_MCLRE$EXTMCLR 000000                                     main@i 001E  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                                     wtemp6 0033  
                          __CFG_HFOFST$ON 000000                            __CFG_PBADEN$ON 000000  
                         __initialization 08F0                              __end_of_main 07FC  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 001D  
                           __activetblptr 000002                  __size_of_SPI2_Initialize 000E  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                          __CFG_WDTEN$OFF 000000                                    _OSCCON 000FD3  
                                  i2u2_48 08DC                            __CFG_XINST$OFF 000000  
                          __CFG_STVREN$ON 000000                                    clear_0 08F6  
                                  _setLed 06BA                           ??_INT0_CallBack 0001  
                               ??_setTCRT 0017                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 0017  
INT0_SetInterruptHandler@InterruptHandler 0013             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 090A                                __accesstop 0060  
                 __end_of__initialization 08FC                                 ?_INT0_ISR 0001  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                          __pcstackCOMRAM 0001                       ??_SYSTEM_Initialize 0015  
                      __end_of_AN_CHANNEL 0611               __size_of_EXT_INT_Initialize 0014  
               __end_of_SYSTEM_Initialize 0924                         ??_SPI2_Initialize 0013  
                         __CFG_PLLCFG$OFF 000000                               setLed@value 0015  
                   _INT0_InterruptHandler 0030                                ??_INT0_ISR 0001  
                              __pnvCOMRAM 0030                        __CFG_CCP2MX$PORTC1 000000  
                      __CFG_CCP3MX$PORTB5 000000                                   ?_setLed 0013  
                 __size_of_ADC_Initialize 0016                                   _OSCCON2 000FD2  
                              _drawToLeds 07FC                                   _OSCTUNE 000F9B  
                                 _SSP2BUF 000F6F         __size_of_INT0_SetInterruptHandler 000A  
               ?_INT0_SetInterruptHandler 0013                           __CFG_PWRTEN$OFF 000000  
                                 __Hparam 0000                                   __Lparam 0000  
                            __psmallconst 0600                                   __pcinit 08F0  
                                 __ramtop 0600                           __size_of_setLed 00A6  
                                 __ptext0 0760                                   __ptext1 0614  
                                 __ptext2 07FC                                   __ptext3 06BA  
                                 __ptext4 090A                                   __ptext5 094E  
                                 __ptext6 085C                                   __ptext7 095C  
                                 __ptext8 097C                                   __ptext9 093A  
                   _OSCILLATOR_Initialize 095C                                   _setTCRT 0614  
                ??_PIN_MANAGER_Initialize 0013                __size_of_SYSTEM_Initialize 001A  
                    end_of_initialization 08FC                             __Lmediumconst 0000  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                               ?_drawToLeds 0001  
                            setTCRT@value 0015                         __size_of_INT0_ISR 0008  
            __end_of_INTERRUPT_Initialize 0980      __end_of_INT0_DefaultInterruptHandler 0982  
   __size_of_INT0_DefaultInterruptHandler 0002              _INT0_DefaultInterruptHandler 0980  
                          _ADC_Initialize 0924                    ?_OSCILLATOR_Initialize 0001  
                         _SPI2_Initialize 094E                            __end_of_setLed 0760  
                   __end_of_INT0_CallBack 08F0                       start_initialization 08F0  
         __size_of_PIN_MANAGER_Initialize 0044                       __size_of_drawToLeds 0060  
                  __end_of_ADC_Initialize 093A                __end_of_EXT_INT_Initialize 094E  
                                ??_setLed 0017             ?_INT0_DefaultInterruptHandler 0001  
                             __pbssCOMRAM 0020                                setTCRT@pos 0013  
        __end_of_INT0_SetInterruptHandler 0974                    _PIN_MANAGER_Initialize 085C  
                               __pintcode 0008                   __end_of_SPI2_Initialize 095C  
                         ?_ADC_Initialize 0001              ??_INTERRUPT_InterruptManager 0001  
                        __CFG_PRICLKEN$ON 000000                               __smallconst 0600  
                                ?_setTCRT 0013                      _INTERRUPT_Initialize 097C  
                                _INT0_ISR 0974                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                                  _LATEbits 000F8D  
     __size_of_INTERRUPT_InterruptManager 00A0                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                  _SSP2CON1 000F6C  
                                _SSP2CON3 000F69                                  _SSP2STAT 000F6D  
                                _TRESHOLD 0611                                _ADCON0bits 000FC2  
                            ??_drawToLeds 0019            ??_INT0_DefaultInterruptHandler 0001  
                             _INTCON2bits 000FF1                     ?_INTERRUPT_Initialize 0001  
                _INT0_SetInterruptHandler 096A                                  __Hrparam 0000  
                                __Lrparam 0000                         _ADC_GetConversion 08A0  
                      __CFG_BOREN$SBORDIS 000000                         __CFG_P2BMX$PORTD2 000000  
                      __end_of_drawToLeds 085C                          ?_SPI2_Initialize 0001  
                 ??_OSCILLATOR_Initialize 0013                        ?_ADC_GetConversion 0013  
                     ??_ADC_GetConversion 0015                                 setLed@pos 0013  
                        __size_of_setTCRT 00A6                                _AN_CHANNEL 0601  
                                __ptext10 096A                                  __ptext11 0924  
                                __ptext12 08A0                                  __ptext14 0974  
                                __ptext15 08D0                                  __ptext16 0980  
                                __ptext17 0000                              _SSP2CON1bits 000F6C  
                           __size_of_main 009C                 __end_of_ADC_GetConversion 08D0  
                                int$flags 0032        __end_of_INTERRUPT_InterruptManager 00A8  
              _INTERRUPT_InterruptManager 0008                              _SSP2STATbits 000F6D  
                              _INTCONbits 000FF2                    ??_INTERRUPT_Initialize 0013  
                      _EXT_INT_Initialize 093A                                  intlevel2 0000  
                 ?_PIN_MANAGER_Initialize 0001                       ?_EXT_INT_Initialize 0001  
                        ??_ADC_Initialize 0013                    __size_of_INT0_CallBack 0020  
                    ??_EXT_INT_Initialize 0015                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 08A0                         __CFG_FOSC$INTIO67 000000  
              __size_of_ADC_GetConversion 0030  
